// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OsmoxyClient is the client API for Osmoxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OsmoxyClient interface {
	GetPoolsSnapshot(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*PoolsSnapshot, error)
	SubscribePoolsUpdate(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (Osmoxy_SubscribePoolsUpdateClient, error)
	// Legacy methods compatiable with UniV2 pairs
	GetUniV2PairsSnapshot(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*UniV2PairsSnapshot, error)
	SubscribeUniV2PairsUpdate(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (Osmoxy_SubscribeUniV2PairsUpdateClient, error)
}

type osmoxyClient struct {
	cc grpc.ClientConnInterface
}

func NewOsmoxyClient(cc grpc.ClientConnInterface) OsmoxyClient {
	return &osmoxyClient{cc}
}

func (c *osmoxyClient) GetPoolsSnapshot(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*PoolsSnapshot, error) {
	out := new(PoolsSnapshot)
	err := c.cc.Invoke(ctx, "/osmoxy.Osmoxy/GetPoolsSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osmoxyClient) SubscribePoolsUpdate(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (Osmoxy_SubscribePoolsUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Osmoxy_ServiceDesc.Streams[0], "/osmoxy.Osmoxy/SubscribePoolsUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &osmoxySubscribePoolsUpdateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Osmoxy_SubscribePoolsUpdateClient interface {
	Recv() (*PoolsUpdate, error)
	grpc.ClientStream
}

type osmoxySubscribePoolsUpdateClient struct {
	grpc.ClientStream
}

func (x *osmoxySubscribePoolsUpdateClient) Recv() (*PoolsUpdate, error) {
	m := new(PoolsUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *osmoxyClient) GetUniV2PairsSnapshot(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*UniV2PairsSnapshot, error) {
	out := new(UniV2PairsSnapshot)
	err := c.cc.Invoke(ctx, "/osmoxy.Osmoxy/GetUniV2PairsSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osmoxyClient) SubscribeUniV2PairsUpdate(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (Osmoxy_SubscribeUniV2PairsUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Osmoxy_ServiceDesc.Streams[1], "/osmoxy.Osmoxy/SubscribeUniV2PairsUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &osmoxySubscribeUniV2PairsUpdateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Osmoxy_SubscribeUniV2PairsUpdateClient interface {
	Recv() (*UniV2PairsUpdate, error)
	grpc.ClientStream
}

type osmoxySubscribeUniV2PairsUpdateClient struct {
	grpc.ClientStream
}

func (x *osmoxySubscribeUniV2PairsUpdateClient) Recv() (*UniV2PairsUpdate, error) {
	m := new(UniV2PairsUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OsmoxyServer is the server API for Osmoxy service.
// All implementations must embed UnimplementedOsmoxyServer
// for forward compatibility
type OsmoxyServer interface {
	GetPoolsSnapshot(context.Context, *EmptyRequest) (*PoolsSnapshot, error)
	SubscribePoolsUpdate(*EmptyRequest, Osmoxy_SubscribePoolsUpdateServer) error
	// Legacy methods compatiable with UniV2 pairs
	GetUniV2PairsSnapshot(context.Context, *EmptyRequest) (*UniV2PairsSnapshot, error)
	SubscribeUniV2PairsUpdate(*EmptyRequest, Osmoxy_SubscribeUniV2PairsUpdateServer) error
	mustEmbedUnimplementedOsmoxyServer()
}

// UnimplementedOsmoxyServer must be embedded to have forward compatible implementations.
type UnimplementedOsmoxyServer struct {
}

func (UnimplementedOsmoxyServer) GetPoolsSnapshot(context.Context, *EmptyRequest) (*PoolsSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoolsSnapshot not implemented")
}
func (UnimplementedOsmoxyServer) SubscribePoolsUpdate(*EmptyRequest, Osmoxy_SubscribePoolsUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribePoolsUpdate not implemented")
}
func (UnimplementedOsmoxyServer) GetUniV2PairsSnapshot(context.Context, *EmptyRequest) (*UniV2PairsSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniV2PairsSnapshot not implemented")
}
func (UnimplementedOsmoxyServer) SubscribeUniV2PairsUpdate(*EmptyRequest, Osmoxy_SubscribeUniV2PairsUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeUniV2PairsUpdate not implemented")
}
func (UnimplementedOsmoxyServer) mustEmbedUnimplementedOsmoxyServer() {}

// UnsafeOsmoxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OsmoxyServer will
// result in compilation errors.
type UnsafeOsmoxyServer interface {
	mustEmbedUnimplementedOsmoxyServer()
}

func RegisterOsmoxyServer(s grpc.ServiceRegistrar, srv OsmoxyServer) {
	s.RegisterService(&Osmoxy_ServiceDesc, srv)
}

func _Osmoxy_GetPoolsSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsmoxyServer).GetPoolsSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmoxy.Osmoxy/GetPoolsSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsmoxyServer).GetPoolsSnapshot(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Osmoxy_SubscribePoolsUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OsmoxyServer).SubscribePoolsUpdate(m, &osmoxySubscribePoolsUpdateServer{stream})
}

type Osmoxy_SubscribePoolsUpdateServer interface {
	Send(*PoolsUpdate) error
	grpc.ServerStream
}

type osmoxySubscribePoolsUpdateServer struct {
	grpc.ServerStream
}

func (x *osmoxySubscribePoolsUpdateServer) Send(m *PoolsUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _Osmoxy_GetUniV2PairsSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsmoxyServer).GetUniV2PairsSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmoxy.Osmoxy/GetUniV2PairsSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsmoxyServer).GetUniV2PairsSnapshot(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Osmoxy_SubscribeUniV2PairsUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OsmoxyServer).SubscribeUniV2PairsUpdate(m, &osmoxySubscribeUniV2PairsUpdateServer{stream})
}

type Osmoxy_SubscribeUniV2PairsUpdateServer interface {
	Send(*UniV2PairsUpdate) error
	grpc.ServerStream
}

type osmoxySubscribeUniV2PairsUpdateServer struct {
	grpc.ServerStream
}

func (x *osmoxySubscribeUniV2PairsUpdateServer) Send(m *UniV2PairsUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// Osmoxy_ServiceDesc is the grpc.ServiceDesc for Osmoxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Osmoxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "osmoxy.Osmoxy",
	HandlerType: (*OsmoxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPoolsSnapshot",
			Handler:    _Osmoxy_GetPoolsSnapshot_Handler,
		},
		{
			MethodName: "GetUniV2PairsSnapshot",
			Handler:    _Osmoxy_GetUniV2PairsSnapshot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribePoolsUpdate",
			Handler:       _Osmoxy_SubscribePoolsUpdate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeUniV2PairsUpdate",
			Handler:       _Osmoxy_SubscribeUniV2PairsUpdate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/osmoxy.proto",
}
